classdef CMOMT4 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT4(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 200;
    end

    function setTasks(Prob)
        bias1 = [1.20591026735345	2.22811351034045	-2.51957091975063	5.25247661697375	2.97514081126948	-4.29706828623762	5.02429903381089	-0.682395032338416	-4.43242520507757	-2.30463752017052	-2.53889826360347	-1.39402477135357	5.36173811376747	5.88871604628009	1.19495774431521	-1.34065226289484	1.62151821693980	4.06902937064034	0.903800025052077	-3.37372947286011	0.778785475713828	-1.35929773049732	-4.53229045618020	4.01371543850415	-4.32385342479270	1.56524872979020	0.906439484976537	4.33092001512999	3.57040753020297	3.62772161982591	-4.80078158121405	4.78194331776087	-5.44992333088839	1.20001759625663	-2.44563392693567	-4.68785642066409	-1.70350203530780	-2.17740412513858	1.88110878364793	-3.15069664880844	-3.86585954498067	-0.221306762159900	-4.30929574132737	0.117958972512009	3.84848333993361	1.91422293487289	3.61611797866548	0.112332428226198	5.88107665812291];
        bias2 = [0.0541383818040200	0.727947747134769	0.944013969674770	-0.425956018144349	0.701830398449494	-0.436191447101076	0.694377570342444	-0.713995502110268	-0.0199531005346278	0.223915554993241	-0.917870480943646	-0.106506149294080	0.435084466296787	0.968717356243626	0.119754530629489	0.0173598570274578	-0.337929270094089	0.196923519295406	0.680242799596885	-0.152823609830906	0.612127400179425	0.936344958197197	-0.963987506019189	-0.290092137244701	-0.649158577620371	0.787984983884187	-0.581905636036438	0.290791888049742	-0.124547688138433	0.425020297771601	-0.637053487357530	-0.422432251070686	-0.836373147682749	0.0723934205591408	-0.942878322505225	0.368282523973618	0.00849587585544231	-0.836179391110366	0.895023768919525	0.0234494052492431	-0.200476869542777	-0.295095377847208	0.871752295730186	-0.183377091422025	0.638825725406461	0.963460730133264	-0.717438826063765	-0.821813891931241	0.662071319087714];

        Prob.T = 2;
        Prob.M(1) = 2;
        Prob.D(1) = 50;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 4, 1, bias1);
        Prob.Lb{1} = -30 * ones(1, Prob.D(1));
        Prob.Ub{1} = 30 * ones(1, Prob.D(1));
        Prob.Lb{1}(1) = 0;
        Prob.Ub{1}(1) = 1;

        Prob.M(2) = 2;
        Prob.D(2) = 50;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 4, 2, bias2 - 1);
        Prob.Lb{2} = -5 * ones(1, Prob.D(2));
        Prob.Ub{2} = 5 * ones(1, Prob.D(2));
        Prob.Lb{2}(1) = 0;
        Prob.Ub{2}(1) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 2;
        optimum{1}(:, 1) = linspace(0, 1, N)';
        optimum{1}(:, 2) = 1 - optimum{1}(:, 1).^2;
        optimum{1} = optimum{1} .* repmat([10, 10], N, 1) + repmat([0, 0], N, 1);

        optimum{2}(:, 1) = linspace(0, 1, N)';
        optimum{2}(:, 2) = 1 - optimum{2}(:, 1).^0.5;
        optimum{2} = optimum{2} .* repmat([5, 5], N, 1) + repmat([2, 2], N, 1);
    end
end
end
