classdef CMOMT6 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT6(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 200;
    end

    function setTasks(Prob)
        bias1 = [46.8659404149841	37.4892137943808	-21.9790246550692	-41.3479913910883	-10.3755015538024	-50.5200573293820	33.4234540928332	-35.7698657968457	-24.1616572556218	-12.0979026472542	-12.0287603551088	-16.0762020021332	14.3954827126258	-28.7658473941403	-47.7346829169953	-16.8955064200641	-14.5274405687931	-44.0297436023842	-22.2042633518793	-2.78281864585359	-50.9304681843202	-10.7505382396916	-9.74909153658209	50.2039280870154	-13.5577563804818	2.51634757397648	-13.0024984653958	30.5597900704067	-29.3457563912449	-45.9443908093524	20.9739333711482	-13.1555505507007	-32.6733747985525	7.03414976695724	-3.17150006486732	-11.9724878256673	11.1471005733503	41.3817230122026	-40.6506788355001	-7.03865781755561	-55.1640381698878	40.2612578569297	-10.2561780485732	-17.0810288528684	0.887514454758559	56.3374648140716	56.3976842096697	39.0599602040521	-54.2720650600443];
        bias2 = [-1.61495322784244	-3.24819867053981	-0.855027703838958	3.82070094097161	0.320903394771928	1.21626707280618	-1.16067221113745	-0.557962126076933	-0.195729542089907	-2.80507696255019	3.61207274504408	-3.39646309085130	-0.316973568121358	1.79971752726404	2.39502420684696	2.75128269533508	-2.58859786400769	-3.63201610571637	0.127614855154278	-1.99635814059352	0.734756551128532	-1.69017345496343	3.88598424305647	0.917548530425149	2.31186714478168	-1.70326053865911	3.22981618919188	-0.593159281665749	1.37758764837268	-0.117421926157300	2.75840690382794	1.50419064708142	2.40173835417880	-0.948506584449846	1.22600967870780	3.35130900506227	1.48381866829266	3.32003791394795	2.70437152373185	1.07996829164743	-0.794851554947660	-1.56997629712309	-3.36071950685700	3.88201485669401	0.703890735485921	3.24307007565206	-2.87593552524656	-3.34509265357819	-1.66183480379775	1.36881562298156	-2.78112309926427	0.926938368970363	1.86872794753342	2.94918654718516	-1.97384624532739	2.22937147078648	3.11956212535107	0.832434895416348	-2.91023261755322	-3.55049499174623	-2.26097690162745	-3.84645063744248	-2.33108929046995	-2.45248313844197	1.53611033599592	0.533547847954701	1.25566793033866	-1.95428861183276	0.324345822850486];

        Prob.T = 2;
        Prob.M(1) = 2;
        Prob.D(1) = 50;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 6, 1, bias1);
        Prob.Lb{1} = -300 * ones(1, Prob.D(1));
        Prob.Ub{1} = 300 * ones(1, Prob.D(1));
        Prob.Lb{1}(1) = 0;
        Prob.Ub{1}(1) = 1;

        Prob.M(2) = 2;
        Prob.D(2) = 70;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 6, 2, bias2);
        Prob.Lb{2} = -20 * ones(1, Prob.D(2));
        Prob.Ub{2} = 20 * ones(1, Prob.D(2));
        Prob.Lb{2}(1) = 0;
        Prob.Ub{2}(1) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 2;
        optimum{1}(:, 1) = linspace(0, 1, N)';
        optimum{1}(:, 2) = 1 - optimum{1}(:, 1).^0.5;
        optimum{1} = optimum{1} .* repmat([30, 10], N, 1) + repmat([0, 0], N, 1);

        optimum{2}(:, 2) = linspace(0, 1, N)';
        optimum{2}(:, 1) = 1 - optimum{2}(:, 2).^0.5;
        optimum{2} = optimum{2} .* repmat([10, 20], N, 1) + repmat([0, 0], N, 1);
    end
end
end
