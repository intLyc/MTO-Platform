classdef CMOMT8 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT8(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 300;
    end

    function setTasks(Prob)
        bias1 = [1.97822289216408	0.322901793141211	0.371213769123545	1.27588759587768	-0.489422961804486	-0.473996048632297	-0.386477369546927	1.95371485846275	-1.84173771170597	-0.0977968903087101	1.76727982417629	1.57316920109993	1.86165062465528	-0.977504385403921	0.737369422347768	-0.763608628272889	-0.195895891321804	0.360946039812112	1.89215836785142	-1.40130786681376	-1.43792499150266	0.481000410553829	-1.42990613467185	-0.964246668800511	-1.43394108425351	0.256536255603544	1.67208456568438	-1.11073834508723	-0.454867810377930	-1.69962720483462	-0.853151859243665	-1.16107325386791	-1.53277948697185	-0.649528373504912	1.68125602090789	1.43742186835129	-0.736862495456032	1.72452266119177	1.84043598106388];
        bias2 = [7.76449937997885	9.05856791759463	7.60169776235090	1.75320175485890	-3.83277992415170	-3.79512613590954	-3.39645867386478	-7.76360654959064	4.67125825068284	6.22934702090219	-7.10044082072745	-2.42235756316565	-4.53083309799719	8.38397350425598	7.11289941544414	9.71462411632679	6.76486582716300	6.65529897212775	1.10135752759242	-3.68112708863406	-1.36710429409343	-3.66048555483978	-1.52467623451258	-1.25944831312386	-8.59041750486024	-8.35806790071494	-7.56324925056869	-3.40576716269401	8.01565283762066	-4.10994721543886	-9.23801018791381	5.96108892967970	2.50231240271366	-9.73593610374759	-8.97437102328821	1.26143652138284	4.19636191701497	8.85654350853553	-7.18062676382082	5.35905674119817	-5.90998039660729	5.43872096437427	-4.39162008151334	-4.11706326751322	-4.03664214687629	-3.51460173724757	3.39005433130944	-5.84706789017915	-3.53803852017765];
        bias3 = [-0.192300200113088	0.447219247928535	0.701277334886625	-0.508106854736476	0.512520907220857	-0.913522061921286	0.182407867663269	0.941000461804038	0.703781169636184	0.169491367375241	0.912461151157353	0.634951775254376	-0.572209909644377	-0.899093776357607	0.755861953628096	-0.626121720661888	0.399840466771069	-0.826992595639063	-0.979523373645337	-0.216414710003796	0.354279144377184	0.808726371653836	-0.262007349260541	0.398158667371934	-0.248058092131445	0.563126676288249	-0.871711930038447	0.534726778634441	0.390175460885208	-0.566289157844147	-0.609270908441034	0.990419093820902	0.248083832402875	0.881980986494864	-0.834736890850738	0.892202580779946	0.448205108330025	-0.151752492416047	-0.317099227661223	-0.563899588418863	-0.668629990823982	0.369443262294022	-0.582164660368771	-0.351341946756860	0.478692231943485	0.179351223872654	-0.340549013163777	0.900641248073717	0.576695464304788	-0.686845506939773	-0.258437295050659	0.213951051388926	-0.698463220800517	-0.989514723305837	-0.583419917724622	0.666243645191758	-0.174590626720509	0.113173925805912	-0.460509001343270];

        Prob.T = 3;
        Prob.M(1) = 2;
        Prob.D(1) = 40;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 8, 1, bias1);
        Prob.Lb{1} = -10 * ones(1, Prob.D(1));
        Prob.Ub{1} = 10 * ones(1, Prob.D(1));
        Prob.Lb{1}(1) = 0;
        Prob.Ub{1}(1) = 1;

        Prob.M(2) = 2;
        Prob.D(2) = 50;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 8, 2, bias2);
        Prob.Lb{2} = -50 * ones(1, Prob.D(2));
        Prob.Ub{2} = 50 * ones(1, Prob.D(2));
        Prob.Lb{2}(1) = 0;
        Prob.Ub{2}(1) = 1;

        Prob.M(3) = 2;
        Prob.D(3) = 60;
        Prob.Fnc{3} = @(x)getFun_CMOMT(x, 8, 3, bias3);
        Prob.Lb{3} = -5 * ones(1, Prob.D(3));
        Prob.Ub{3} = 5 * ones(1, Prob.D(3));
        Prob.Lb{3}(1) = 0;
        Prob.Ub{3}(1) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 2;
        optimum{1} = UniformPoint(N, M);
        optimum{1} = optimum{1} ./ repmat(sqrt(sum(optimum{1}.^2, 2)), 1, M);
        optimum{1} = optimum{1} .* repmat([8, 5], N, 1) + repmat([3, 0], N, 1);

        optimum{2} = UniformPoint(N, M);
        optimum{2} = optimum{2} ./ repmat(sqrt(sum(optimum{2}.^2, 2)), 1, M);
        optimum{2} = optimum{2} .* repmat([5, 5], N, 1) + repmat([2, 2], N, 1);

        optimum{3} = UniformPoint(N, M);
        optimum{3} = optimum{3} ./ repmat(sqrt(sum(optimum{3}.^2, 2)), 1, M);
        optimum{3} = optimum{3} .* repmat([5, 8], N, 1) + repmat([0, 3], N, 1);
    end
end
end
