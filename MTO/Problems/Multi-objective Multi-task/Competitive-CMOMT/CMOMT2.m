classdef CMOMT2 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT2(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 200;
    end

    function setTasks(Prob)
        bias1 = [-16.6939801248906	-19.6959095849610	11.9609150383881	-4.86409523042222	7.23711080175533	-11.1152371987641	-11.4095760183533	-11.0684371390115	-2.09950171719518	16.0326872417599	-18.4147089615011	-11.2898629956676	12.4919499016961	13.6075579873603	8.52422841623515	-19.8279835752731	-13.3754757982098	8.55301093375692	11.1241801465805	-17.4365484734890	-15.0871648899066	-6.67202034240537	5.28289097893259	16.7853491329511	-10.1014554179192	7.18450871779530	-5.08713138578391	13.8809749373964	-4.72497456358570	1.24349637404462	11.3836481848125	-8.54123580823073	11.2724206707310	-5.72590215241639	3.30767697833826	4.45983962988633	-19.8089073866343	-18.1198544164181	-14.2381970998006	1.45362276915507	1.00663014258665	10.1020874441183	3.31820487114308	7.62261430559168	2.70733509595447	-15.8468991015718	-19.7077507984316	19.4401018440334	0.790553346723918];
        bias2 = [0.360498436560944	0.291734265939657	0.0766769932424184	-0.217324641711788	0.356768117178448	-0.305820207637813	-0.158651557063833	-0.230731208689534	0.0314556206178322	0.295835422068319	-0.130277001729145	0.217228049594085	-0.321074364183932	-0.295871551548671	-0.191117634051849	-0.00928330715806397	-0.0193802763904066	-0.119391101577504	-0.374324922428515	0.324564246024338	0.146383735268404	0.230973342181140	0.369028737180490	-0.0771216692319784	0.297051209176359	0.0524829068902462	-0.0708264521255069	0.310020821790645	-0.159919236029533	0.0975498549398532	-0.0736843202145239	-0.0257699822286820	0.0674650953987025	0.0987213869194145	0.363983385885840	0.0920359362007364	-0.366816230448567	0.380617442888403	-0.371746957168618	0.180970950911618	-0.179425912362915	0.100881697759524	-0.270768135938233	0.354427109740524	-0.224186453870853	-0.349889556341703	-0.325849322234337	0.286001157998704	-0.303254568857297];

        Prob.T = 2;
        Prob.M(1) = 2;
        Prob.D(1) = 50;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 2, 1, bias1);
        Prob.Lb{1} = -100 * ones(1, Prob.D(1));
        Prob.Ub{1} = 100 * ones(1, Prob.D(1));
        Prob.Lb{1}(1) = 0;
        Prob.Ub{1}(1) = 1;

        Prob.M(2) = 2;
        Prob.D(2) = 50;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 2, 2, bias2);
        Prob.Lb{2} = -2 * ones(1, Prob.D(2));
        Prob.Ub{2} = 2 * ones(1, Prob.D(2));
        Prob.Lb{2}(1) = 0;
        Prob.Ub{2}(1) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 2;
        optimum{1} = UniformPoint(N, M);
        optimum{1} = optimum{1} ./ repmat(sqrt(sum(optimum{1}.^2, 2)), 1, M);
        optimum{1} = optimum{1} .* repmat([8, 5], N, 1) + repmat([2, 0], N, 1);

        optimum{2} = UniformPoint(N, M);
        optimum{2} = optimum{2} ./ repmat(sqrt(sum(optimum{2}.^2, 2)), 1, M);
        optimum{2} = optimum{2} .* repmat([5, 8], N, 1) + repmat([0, 2], N, 1);
    end
end
end
