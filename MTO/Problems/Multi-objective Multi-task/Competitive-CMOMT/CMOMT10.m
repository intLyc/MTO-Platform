classdef CMOMT10 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT10(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 240;
    end

    function setTasks(Prob)
        bias1 = [-4.82020684010322	4.74752632818201	3.48588254303886	2.90117458531370	-5.06231116552220	5.38238506120545	-4.43608117128700	5.03076172826972	1.60623696238515	-0.468738876941664	5.75436072543102	4.36537780310523	1.92177883372120	-2.80507613426274	3.54159132406532	-0.595667655227505	4.95026641733016	3.10204442320073	-5.97737249073636	4.35446612192685	-4.49951706237544	0.885272824889003	-2.07764089686507	-5.41998126465641	0.618415770037272	2.38755548103499	1.02039073824325	-5.81631618517043	-2.04081167680115	-2.74173639581946	-0.0287877697952252	-1.58764498015050	-5.50132194884007	5.97616488319559	3.82282902900181	1.76455962204004	-5.57061500178331	-2.08253546417490	3.10841500775258	-4.04870891182701	4.08619299161592	-4.91376134051915	-1.47140140428395	5.60301985565665	0.588827746444721	5.89506542416924	-4.04531660926287	3.94851766513001	-0.351622385587574];
        bias2 = [0.595307559328067	-0.389296617217674	-0.575474465768648	0.307448467106739	0.644342239416125	-0.741761568189376	-0.824123713069284	0.594887955848018	0.888556834106754	0.916918954682354	-0.955079823076212	0.779111826535496	0.169323770049573	-0.436600269575767	0.615664931171220	-0.384701903476643	0.566511642156481	0.308393102211928	0.968918004991438	0.978324371173153	0.169243240349090	0.825198667935977	-0.345499601489997	0.929124610766189	0.252842643823026	-0.656745309679736	-0.346088420535815	-0.186416746815303	-0.380469911200674	-0.784475111277222	0.865468409366361	0.631436278027446	-0.00424502489035517	-0.580395715496922	0.492069487185040	-0.396087999015833	0.279831549676043	0.325287315628398	0.0367841267191180	-0.661994921673851	0.242711834864330	-0.341777737820963	0.979464352026796	-0.0489964776966205	0.139537693459892	-0.393589361681606	-0.938021770438205	0.233787600498240	-0.772822555313165];

        Prob.T = 2;
        Prob.M(1) = 3;
        Prob.D(1) = 50;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 10, 1, bias1);
        Prob.Lb{1} = -30 * ones(1, Prob.D(1));
        Prob.Ub{1} = 30 * ones(1, Prob.D(1));
        Prob.Lb{1}(1:2) = 0;
        Prob.Ub{1}(1:2) = 1;

        Prob.M(2) = 3;
        Prob.D(2) = 50;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 10, 2, bias2);
        Prob.Lb{2} = -5 * ones(1, Prob.D(2));
        Prob.Ub{2} = 5 * ones(1, Prob.D(2));
        Prob.Lb{2}(1:2) = 0;
        Prob.Ub{2}(1:2) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 3;
        optimum{1} = UniformPoint(N, M);
        optimum{1} = optimum{1} ./ repmat(sqrt(sum(optimum{1}.^2, 2)), 1, M);
        temp = size(optimum{1}, 1);
        optimum{1} = optimum{1} .* repmat([8, 5, 5], temp, 1) + repmat([2, 0, 0], temp, 1);

        optimum{2} = UniformPoint(N, M);
        optimum{2} = optimum{2} ./ repmat(sqrt(sum(optimum{2}.^2, 2)), 1, M);
        temp = size(optimum{2}, 1);
        optimum{2} = optimum{2} .* repmat([5, 8, 5], temp, 1) + repmat([0, 2, 0], temp, 1);
    end
end
end
