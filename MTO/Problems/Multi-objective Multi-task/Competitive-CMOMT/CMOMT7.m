classdef CMOMT7 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT7(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 300;
    end

    function setTasks(Prob)
        bias1 = [-0.0387268930760234	0.286380587826410	0.350331756615238	0.153234635328968	-0.338084162295302	-0.0439679994323473	0.129948689687179	0.120454439454638	0.118717860389793	0.123068055241397	-0.368513433438268	0.00195220616214342	-0.130038427698272	-0.279606935236868	0.279247946890845	-0.198341786605893	-0.342977649658575	-0.0259598338114782	-0.00206033092277780	-0.298619067998522	0.157422823245543	0.339283909355874	-0.191263854279262	-0.166832630477606	-0.307084856066459	-0.359963629960585	0.240899634035811	0.342627589236315	-0.0825522053107577	-0.216585910295435	0.155235128309133	0.103610196810591	-0.0234655606929018	-0.211550104890266	0.0258427537791740	0.279828737296603	0.279730401425972	-0.366303680592745	-0.294374692151782	0.231129824574826	-0.152877618117238	-0.298904200600036	0.376557137091237	-0.135296187198778	-0.126117127470173	-0.0226012724697281	0.0793765113906906	0.238850406334374	0.123879765194989];
        bias2 = [0.00786737757761635	-0.380603022920593	-0.505853487562444	-0.0491809932551903	0.124749203028921	0.577528262767662	-0.428923201170429	-0.397128652042165	-0.521063983568789	0.270895199858523	-0.347976811428152	-0.565466684697285	-0.339596561834170	-0.285496554166576	-0.195247770631500	0.473292410813428	-0.353145809687645	0.292420706571193	0.494789220902106	-0.595714845644804	0.206222416965091	0.136499475227910	0.0296762489743903	0.411768273227753	0.465765549723343	-0.140671590344253	0.194465867131603	-0.0200076148040825	0.465637449630375	-0.266366048602951	0.157799417887120	0.495719112671183	0.351343004067449	0.299863607327058	-0.225867587566519	0.373902208755156	-0.248656547120044	-0.202632061676302	0.257735180759856	-0.171141701769426	-0.594635267193758	0.323370951948630	-0.0283449326975401	0.519695554084053	-0.551179371281387	0.531928403599989	0.340979255634562	-0.0868750045949756	0.271905143133104];
        bias3 = [-0.153547618998937	0.00942694305199654	-0.377403907908034	-0.379624850784399	0.130110172460998	-0.0262975883739237	0.118160086346048	0.128440839428157	0.235056768163944	0.143939932314235	0.238517018862755	0.368540374595311	0.370708524673628	0.0938317820446685	0.274911384274414	0.0121479701913113	0.00722257335356880	0.0261945028628941	0.198915374640210	0.327643343062575	-0.325946501399995	-0.179252737909147	-0.310862574206943	0.213503233423870	0.0844229486970781	0.149458131855582	-0.135769288580462	-0.398699452064332	0.164559138301330	-0.127590362517355	-0.153246161785620	-0.0280196750130847	0.292582897573814	0.0845813505404699	0.305081721092795	0.120389350098976	0.256305945391557	-0.368763299608566	0.364771560882171	-0.0625483174561125	-0.309677810321507	0.382641743706970	-0.0832919597711560	0.232224467445982	-0.0114030015391940	0.0745133915342168	0.349983749395552	-0.219506737388337	-0.0744143701097556];

        Prob.T = 3;
        Prob.M(1) = 2;
        Prob.D(1) = 50;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 7, 1, bias1);
        Prob.Lb{1} = -2 * ones(1, Prob.D(1));
        Prob.Ub{1} = 2 * ones(1, Prob.D(1));
        Prob.Lb{1}(1) = 0;
        Prob.Ub{1}(1) = 1;

        Prob.M(2) = 2;
        Prob.D(2) = 50;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 7, 2, bias2);
        Prob.Lb{2} = -3 * ones(1, Prob.D(2));
        Prob.Ub{2} = 3 * ones(1, Prob.D(2));
        Prob.Lb{2}(1) = 0;
        Prob.Ub{2}(1) = 1;

        Prob.M(3) = 2;
        Prob.D(3) = 50;
        Prob.Fnc{3} = @(x)getFun_CMOMT(x, 7, 3, bias3);
        Prob.Lb{3} = -2 * ones(1, Prob.D(3));
        Prob.Ub{3} = 2 * ones(1, Prob.D(3));
        Prob.Lb{3}(1) = 0;
        Prob.Ub{3}(1) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 2;
        optimum{1} = UniformPoint(N, M);
        optimum{1} = optimum{1} ./ repmat(sqrt(sum(optimum{1}.^2, 2)), 1, M);
        optimum{1} = optimum{1} .* repmat([8, 5], N, 1) + repmat([3, 0], N, 1);

        optimum{2} = UniformPoint(N, M);
        optimum{2} = optimum{2} ./ repmat(sqrt(sum(optimum{2}.^2, 2)), 1, M);
        optimum{2} = optimum{2} .* repmat([5, 5], N, 1) + repmat([2, 2], N, 1);

        optimum{3} = UniformPoint(N, M);
        optimum{3} = optimum{3} ./ repmat(sqrt(sum(optimum{3}.^2, 2)), 1, M);
        optimum{3} = optimum{3} .* repmat([5, 8], N, 1) + repmat([0, 3], N, 1);
    end
end
end
