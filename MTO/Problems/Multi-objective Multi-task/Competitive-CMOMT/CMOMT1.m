classdef CMOMT1 < Problem
% <Multi-task> <Multi-objective> <Competitive>

%------------------------------- Reference --------------------------------
% @Article{Li2025CMO-MTO,
%   title    = {Evolutionary Competitive Multiobjective Multitasking: One-Pass Optimization of Heterogeneous Pareto Solutions},
%   author   = {Li, Yanchi and Wu, Xinyi and Gong, Wenyin and Xu, Meng and Wang, Yubo and Gu, Qiong},
%   journal  = {IEEE Transactions on Evolutionary Computation},
%   year     = {2024},
%   doi      = {10.1109/TEVC.2024.3524508},
% }
%--------------------------------------------------------------------------

%------------------------------- Copyright --------------------------------
% Copyright (c) Yanchi Li. You are free to use the MToP for research
% purposes. All publications which use this platform should acknowledge
% the use of "MToP" or "MTO-Platform" and cite as "Y. Li, W. Gong, F. Ming,
% T. Zhang, S. Li, and Q. Gu, MToP: A MATLAB Optimization Platform for
% Evolutionary Multitasking, 2023, arXiv:2312.08134"
%--------------------------------------------------------------------------

methods
    function Prob = CMOMT1(varargin)
        Prob = Prob@Problem(varargin);
        Prob.maxFE = 1000 * 200;
    end

    function setTasks(Prob)
        bias1 = [-9.13527797841981	-16.2082648491711	-14.4486752087909	-16.0192623944508	-8.67427656470271	-19.2137487750900	-4.25343232015194	-7.86861320139309	-4.04583861054979	-10.5714800811767	-6.31990250247348	15.2284002428808	-6.31718807778626	-3.39615038131274	-7.92875074585288	17.9635215435347	-13.8902436910941	17.0875551589738	-2.38013359052403	-12.6608275815406	-4.07052486727255	19.6121924418867	-12.0473606089581	19.6010716519629	-16.1889175966137	10.3605582912000	-8.09707280758548	-13.5873230168479	-19.6163666105176	2.40487074021731	-18.2573365255238	7.22260516713621	-14.0421570635625	-5.26446066290959	6.25886570715824	9.47784992624725	-8.28389006198788	10.9069629166264	3.00814937951452	1.46937887140187	-0.435111927087689	15.4422400315495	-11.3847360226638	9.91299269269211	-7.32793578821121	7.01851313685361	-1.61709294870711	19.9818360506391	-16.2564375659451];
        bias2 = [-3.81649392883520	-11.1304384535452	16.2246182745193	10.3334484227370	-18.3366726984208	-11.8621485907898	-9.73984802580137	-15.8269040815190	1.10294873843985	10.1087244129079	-13.7097663028583	13.9579412919757	-8.97001666459524	-1.72394441226304	-17.0576413945545	9.02638672376934	-19.3879827724572	-1.29635130096433	-13.5355610267249	9.93292316112996	14.8745446786945	3.62387187000754	4.60722485319673	-0.739886977924641	12.8269091662531	12.0568958103830	1.18168074848154	-1.92732379090882	-5.57496863032797	-11.4864353332927	4.60962089289755	-16.2328098492620	-8.06169279127171	-7.41309621728906	-9.77345795916754	3.35755514592094	9.61620976555011	1.26098376588603	9.04326519783723	-8.85155821189916	-13.7824305680979	3.09748268815469	-12.6300855277264	-8.47446760197438	0.607163174676643	15.8283577108118	8.38576220813439	-5.67418686992911	10.8836420504957];

        Prob.T = 2;
        Prob.M(1) = 2;
        Prob.D(1) = 30;
        Prob.Fnc{1} = @(x)getFun_CMOMT(x, 1, 1, bias1);
        Prob.Lb{1} = -100 * ones(1, Prob.D(1));
        Prob.Ub{1} = 100 * ones(1, Prob.D(1));
        Prob.Lb{1}(1) = 0;
        Prob.Ub{1}(1) = 1;

        Prob.M(2) = 2;
        Prob.D(2) = 50;
        Prob.Fnc{2} = @(x)getFun_CMOMT(x, 1, 2, bias2);
        Prob.Lb{2} = -100 * ones(1, Prob.D(2));
        Prob.Ub{2} = 100 * ones(1, Prob.D(2));
        Prob.Lb{2}(1) = 0;
        Prob.Ub{2}(1) = 1;
    end

    function optimum = getOptimum(Prob)
        N = 10000; M = 2;
        optimum{1} = UniformPoint(N, M);
        optimum{1} = optimum{1} ./ repmat(sqrt(sum(optimum{1}.^2, 2)), 1, M);
        optimum{1} = optimum{1} .* repmat([8, 5], N, 1) + repmat([2, 0], N, 1);

        optimum{2} = UniformPoint(N, M);
        optimum{2} = optimum{2} ./ repmat(sqrt(sum(optimum{2}.^2, 2)), 1, M);
        optimum{2} = optimum{2} .* repmat([5, 8], N, 1) + repmat([0, 2], N, 1);
    end
end
end
